name: "CI: Test the installation with cmake"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Install tools on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt update && sudo apt install libtbb-dev libspdlog-dev libsimdjson-dev

    - name: Install tools on macOS
      if: matrix.os == 'macos-latest'
      run: brew install tbb spdlog simdjson

    - name: Install tools on Windows
      if: matrix.os == 'windows-latest'
      run: |
        # Install vcpkg for spdlog, tbb, fmt, and simdjson on Windows
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg install spdlog:x64-windows tbb:x64-windows fmt:x64-windows simdjson:x64-windows
        echo "VCPKG_ROOT=$env:GITHUB_WORKSPACE\vcpkg" >> $env:GITHUB_ENV

    - name: Set environment variables on macOS
      if: matrix.os == 'macos-latest'
      run: |
        echo "CPLUS_INCLUDE_PATH=$(brew --prefix tbb)/include:$(brew --prefix fmt)/include:$(brew --prefix spdlog)/include" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$(brew --prefix tbb)/lib:$(brew --prefix fmt)/lib:$(brew --prefix spdlog)/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$(brew --prefix tbb)/lib:$(brew --prefix fmt)/lib:$(brew --prefix spdlog)/lib" >> $GITHUB_ENV

    - uses: actions/checkout@v4

    - name: Build and install on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}
      run: |
        mkdir -p build && cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        cmake --build .
        sudo cmake --install .

    - name: Build and install on macOS
      if: matrix.os == 'macos-latest'
      working-directory: ${{github.workspace}}
      run: |
        mkdir -p build && cd build
        cmake .. -DCMAKE_PREFIX_PATH="$(brew --prefix tbb);$(brew --prefix fmt);$(brew --prefix spdlog)" -DCMAKE_BUILD_TYPE=Release
        cmake --build .
        sudo cmake --install .

    - name: Build and install on Windows
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}
      run: |
        New-Item -ItemType Directory -Force -Path build; cd build
        cmake .. -DCMAKE_TOOLCHAIN_FILE="$env:GITHUB_WORKSPACE\vcpkg\scripts\buildsystems\vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release
        cmake --install .

    - name: Test include on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}
      run: |
        touch test.cpp
        echo "#include <dsf/dsf.hpp>" >> test.cpp
        echo "int main() {}" >> test.cpp
        g++ test.cpp -std=c++20 && echo "Compiled successfully" || echo "Cannot include dsf"

    - name: Test include on macOS
      if: matrix.os == 'macos-latest'
      working-directory: ${{github.workspace}}
      run: |
        touch test.cpp
        echo "#include <dsf/dsf.hpp>" >> test.cpp
        echo "int main() {}" >> test.cpp
        g++ test.cpp -std=c++20 \
          -I$(brew --prefix tbb)/include -I$(brew --prefix fmt)/include -I$(brew --prefix spdlog)/include \
          -L$(brew --prefix tbb)/lib -L$(brew --prefix fmt)/lib -L$(brew --prefix spdlog)/lib \
          -ltbb -lfmt -lspdlog \
          && echo "Compiled successfully" \
          || (echo "Cannot include dsf" ; exit 1)

    - name: Test include on Windows
      if: matrix.os == 'windows-latest'
      working-directory: ${{github.workspace}}
      run: |
        echo "#include <dsf/dsf.hpp>" > test.cpp
        echo "int main() {}" >> test.cpp
        cl.exe test.cpp /std:c++20 /I"$env:VCPKG_ROOT/installed/x64-windows/include" /link /LIBPATH:"$env:VCPKG_ROOT/installed/x64-windows/lib" spdlog.lib tbb.lib fmt.lib simdjson.lib && echo "Compiled successfully" || (echo "Cannot include dsf" ; exit 1)
