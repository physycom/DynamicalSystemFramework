name: "CI: Test the installation with cmake (FetchContent-aware)"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Minimal tool install for Linux (compiler + cmake). Dependencies are fetched by CMake via FetchContent.
      - name: Install build tools on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake ninja-build

      # Configure & build on all platforms. Use an explicit configure step so FetchContent has a chance to run during configure.
      - name: Configure CMake (all platforms)
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p build
          cmake -S . -B build -DDSF_BUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install -DCMAKE_POSITION_INDEPENDENT_CODE=ON

      - name: Build on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . -j$(nproc) --config Coverage

      - name: Build on macOS
        if: matrix.os == 'macos-latest'
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . -j$(sysctl -n hw.ncpu) --config Debug

      - name: Setup MSVC environment on Windows
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        shell: powershell
        run: cmake --build . -j $env:NUMBER_OF_PROCESSORS --config Debug

      # Install the build (to a repository-local prefix). FetchContent-based dependencies should be installed there too.
      - name: Install build
        working-directory: ${{ github.workspace }}
        run: cmake --install build --prefix ${GITHUB_WORKSPACE}/install --config Debug

      # Quick include/link tests per platform â€” only use the repository-local install prefix created by CMake+FetchContent.
      - name: Test include on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        working-directory: ${{ github.workspace }}
        run: |
          echo "#include <dsf/dsf.hpp>" > test.cpp
          echo "int main() { return 0; }" >> test.cpp
          g++ test.cpp -std=c++20 \
            -I${GITHUB_WORKSPACE}/install/include \
            -L${GITHUB_WORKSPACE}/install/lib \
            -Wl,-rpath,${GITHUB_WORKSPACE}/install/lib \
            -ldsf \
            && echo "SUCCESS: dsf library can be included and linked on Ubuntu!" \
            || (echo "FAILED: Cannot include/link dsf on Ubuntu"; exit 1)

      - name: Test include on macOS
        if: matrix.os == 'macos-latest'
        working-directory: ${{ github.workspace }}
        run: |
          echo "#include <dsf/dsf.hpp>" > test.cpp
          echo "int main() { return 0; }" >> test.cpp
          clang++ test.cpp -std=c++20 \
            -I${GITHUB_WORKSPACE}/install/include \
            -L${GITHUB_WORKSPACE}/install/lib \
            -Wl,-rpath,${GITHUB_WORKSPACE}/install/lib \
            -ldsf \
            && echo "SUCCESS: dsf library can be included and linked on macOS!" \
            || (echo "FAILED: Cannot include/link dsf on macOS"; exit 1)

      - name: Test include on Windows
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        shell: powershell
        run: |
          echo "#include <dsf/dsf.hpp>" > test.cpp
          echo "int main() { return 0; }" >> test.cpp

          $INSTALL_DIR = "$env:GITHUB_WORKSPACE\install"

          Write-Host "INSTALL_DIR = $INSTALL_DIR"

          if (-not (Test-Path "$INSTALL_DIR\include\dsf")) {
            Write-Host "ERROR: dsf headers not found in $INSTALL_DIR\include"
            exit 1
          }

          Write-Host "=== debug: list install/include ==="
          Get-ChildItem -Force "$INSTALL_DIR\include" -Depth 1 | ForEach-Object { $_.FullName }

          function Find-Lib($dir, $pattern) {
            if (-not (Test-Path $dir)) { return $null }
            $found = Get-ChildItem -Path $dir -Filter $pattern -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
            return $found
          }

          $libs = @()

          $dsfLib = Find-Lib "$INSTALL_DIR\lib" "dsf*.lib"
          if ($dsfLib) { $libs += $dsfLib.Name } else { Write-Host "ERROR: dsf lib not found in $INSTALL_DIR\lib"; exit 1 }

          # Also attempt to pick up any dependency libs installed into the same prefix (e.g. tbb, fmt, spdlog, simdjson)
          foreach ($pat in @("tbb*.lib","fmt*.lib","spdlog*.lib","simdjson*.lib")) {
            $f = Find-Lib "$INSTALL_DIR\lib" $pat
            if ($f) { $libs += $f.Name }
          }

          Write-Host "Libraries to link: $($libs -join ', ')"

          $compilerArgs = @(
            "/nologo", "/std:c++20", "/utf-8", "/EHsc",
            "test.cpp",
            "/I`"$INSTALL_DIR\include`"",
            "/link",
            "/LIBPATH:`"$INSTALL_DIR\lib`""
          )
          $compilerArgs += $libs

          & cl.exe @compilerArgs

          if ($LASTEXITCODE -ne 0) { Write-Host "FAILED: Cannot compile/link test program on Windows (exit code $LASTEXITCODE)"; exit 1 }

      # Make test executables runnable where needed
      - name: Fix permissions for test executables
        if: matrix.os != 'windows-latest'
        run: chmod +x ${{ github.workspace }}/build/Test_* || true

      # Run CTest where available
      - name: Run tests on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        working-directory: ${{ github.workspace }}/build
        run: ctest --output-on-failure -j$(nproc)

      - name: Run tests on macOS
        if: matrix.os == 'macos-latest'
        working-directory: ${{ github.workspace }}/build
        run: ctest --output-on-failure -j$(sysctl -n hw.ncpu)

      - name: Run tests on Windows
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        shell: powershell
        run: ctest --output-on-failure -C Debug -j $env:NUMBER_OF_PROCESSORS
