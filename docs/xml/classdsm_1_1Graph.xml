<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classdsm_1_1Graph" kind="class" language="C++" prot="public">
    <compoundname>dsm::Graph</compoundname>
    <includes local="no">Graph.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Id</type>
      </param>
      <param>
        <type>typename Size</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdsm_1_1Graph_1a82bd6998f115d9d05872fb1438dc766e" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; Id, shared&lt; <ref refid="classdsm_1_1Node" kindref="compound">Node</ref>&lt; Id &gt; &gt; &gt;</type>
        <definition>std::unordered_map&lt;Id, shared&lt;Node&lt;Id&gt; &gt; &gt; dsm::Graph&lt; Id, Size &gt;::m_nodes</definition>
        <argsstring></argsstring>
        <name>m_nodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="43" column="24" bodyfile="src/dsm/headers/Graph.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsm_1_1Graph_1a82ddbe1275584645f173db51828d202f" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; Id, shared&lt; <ref refid="classdsm_1_1Street" kindref="compound">Street</ref>&lt; Id, Size &gt; &gt; &gt;</type>
        <definition>std::unordered_map&lt;Id, shared&lt;Street&lt;Id, Size&gt; &gt; &gt; dsm::Graph&lt; Id, Size &gt;::m_streets</definition>
        <argsstring></argsstring>
        <name>m_streets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="44" column="24" bodyfile="src/dsm/headers/Graph.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsm_1_1Graph_1aa0f10644c6e30df6880f0c8c26a111d6" prot="private" static="no" mutable="no">
        <type>shared&lt; <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Id, bool &gt; &gt;</type>
        <definition>shared&lt;SparseMatrix&lt;Id, bool&gt; &gt; dsm::Graph&lt; Id, Size &gt;::m_adjacency</definition>
        <argsstring></argsstring>
        <name>m_adjacency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="45" column="12" bodyfile="src/dsm/headers/Graph.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdsm_1_1Graph_1ae515dc05e641ae032f51ee1332831b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; dsm::Graph&lt; Id, Size &gt;::Graph</definition>
        <argsstring>()</argsstring>
        <name>Graph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="48" column="5" bodyfile="src/dsm/headers/Graph.hpp" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a45b7fe1d389f2f67981d1ce46be20128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; dsm::Graph&lt; Id, Size &gt;::Graph</definition>
        <argsstring>(const SparseMatrix&lt; Id, bool &gt; &amp;adj)</argsstring>
        <name>Graph</name>
        <param>
          <type>const <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Id, bool &gt; &amp;</type>
          <declname>adj</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classdsm_1_1Graph" kindref="compound">Graph</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adj</parametername>
</parameternamelist>
<parameterdescription>
<para>An adjacency matrix made by a <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref> representing the graph&apos;s adjacency matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="51" column="5" bodyfile="src/dsm/headers/Graph.hpp" bodystart="112" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a87e97609bcc593f80a7e568320b1a7d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; dsm::Graph&lt; Id, Size &gt;::Graph</definition>
        <argsstring>(const std::unordered_map&lt; Id, shared&lt; Street&lt; Id, Size &gt;&gt;&gt; &amp;streetSet)</argsstring>
        <name>Graph</name>
        <param>
          <type>const std::unordered_map&lt; Id, shared&lt; <ref refid="classdsm_1_1Street" kindref="compound">Street</ref>&lt; Id, Size &gt;&gt;&gt; &amp;</type>
          <declname>streetSet</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classdsm_1_1Graph" kindref="compound">Graph</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>streetSet</parametername>
</parameternamelist>
<parameterdescription>
<para>A map of streets representing the graph&apos;s streets </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="54" column="5" bodyfile="src/dsm/headers/Graph.hpp" bodystart="125" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a379d1051a9596957286543e262b4514c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; void dsm::Graph&lt; Id, Size &gt;::buildAdj</definition>
        <argsstring>()</argsstring>
        <name>buildAdj</name>
        <briefdescription>
<para>Build the graph&apos;s adjacency matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="57" column="10" bodyfile="src/dsm/headers/Graph.hpp" bodystart="141" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a12485e07ca4397cdc21cc75e26fdd89f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; void dsm::Graph&lt; Id, Size &gt;::importAdj</definition>
        <argsstring>(const std::string &amp;fileName)</argsstring>
        <name>importAdj</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Import the graph&apos;s adjacency matrix from a file. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the file to import the adjacency matrix from. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if the file is not found or the format is not supported The matrix format is deduced from the file extension. Currently only .dsm files are supported. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="63" column="10" bodyfile="src/dsm/headers/Graph.hpp" bodystart="161" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a856d0f814897cd45d3a111fbdba6ddc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; void dsm::Graph&lt; Id, Size &gt;::addNode</definition>
        <argsstring>(shared&lt; Node&lt; Id &gt;&gt; node)</argsstring>
        <name>addNode</name>
        <param>
          <type>shared&lt; <ref refid="classdsm_1_1Node" kindref="compound">Node</ref>&lt; Id &gt;&gt;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Add a node to the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A std::shared_ptr to the node to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="67" column="10" bodyfile="src/dsm/headers/Graph.hpp" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a797d512830effa735a4dad12292bb9be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; void dsm::Graph&lt; Id, Size &gt;::addNode</definition>
        <argsstring>(const Node&lt; Id &gt; &amp;node)</argsstring>
        <name>addNode</name>
        <param>
          <type>const <ref refid="classdsm_1_1Node" kindref="compound">Node</ref>&lt; Id &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Add a node to the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the node to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="70" column="10" bodyfile="src/dsm/headers/Graph.hpp" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a9e92893bc7e521463ea8cf29ec2f1ed8" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dsm::Graph&lt; Id, Size &gt;::requires</definition>
        <argsstring>(is_node_v&lt; Tn &gt; &amp;&amp;...) void addNodes(Tn &amp;&amp;... nodes)</argsstring>
        <name>requires</name>
        <param>
          <type>is_node_v&lt; Tn &gt; &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="73" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a997d6dd63bbf73cf334904e10f7a7fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
        </templateparamlist>
        <type>requires is_node_v&lt; T1 &gt; &amp;&amp;is_node_v&lt; Tn &gt; &amp;&amp;void</type>
        <definition>requires is_node_v&lt;T1&gt;&amp;&amp; is_node_v&lt;Tn&gt;&amp;&amp; void dsm::Graph&lt; Id, Size &gt;::addNodes</definition>
        <argsstring>(T1 &amp;&amp;node, Tn &amp;&amp;... nodes)</argsstring>
        <name>addNodes</name>
        <param>
          <type>T1 &amp;&amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>Tn &amp;&amp;...</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="78" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1accc4186d12b8d08582036834b564a6ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; void dsm::Graph&lt; Id, Size &gt;::addStreet</definition>
        <argsstring>(shared&lt; Street&lt; Id, Size &gt;&gt; street)</argsstring>
        <name>addStreet</name>
        <param>
          <type>shared&lt; <ref refid="classdsm_1_1Street" kindref="compound">Street</ref>&lt; Id, Size &gt;&gt;</type>
          <declname>street</declname>
        </param>
        <briefdescription>
<para>Add a street to the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>street</parametername>
</parameternamelist>
<parameterdescription>
<para>A std::shared_ptr to the street to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="82" column="10" bodyfile="src/dsm/headers/Graph.hpp" bodystart="226" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a30c764118503fe2a279e263cd943c791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; void dsm::Graph&lt; Id, Size &gt;::addStreet</definition>
        <argsstring>(const Street&lt; Id, Size &gt; &amp;street)</argsstring>
        <name>addStreet</name>
        <param>
          <type>const <ref refid="classdsm_1_1Street" kindref="compound">Street</ref>&lt; Id, Size &gt; &amp;</type>
          <declname>street</declname>
        </param>
        <briefdescription>
<para>Add a street to the graph. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>street</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the street to add </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="85" column="10" bodyfile="src/dsm/headers/Graph.hpp" bodystart="232" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a50b4842d5f8eab859141f56bf61aa986" prot="public" static="no" const="no" explicit="no" inline="no" refqual="rvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dsm::Graph&lt; Id, Size &gt;::requires</definition>
        <argsstring>(is_street_v&lt; Tn &gt; &amp;&amp;...) void addStreets(Tn &amp;&amp;... streets)</argsstring>
        <name>requires</name>
        <param>
          <type>is_street_v&lt; Tn &gt; &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="88" column="7"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a7e7d4b3fef65256c064bdec785b22a4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
        </templateparamlist>
        <type>requires is_street_v&lt; T1 &gt; &amp;&amp;is_street_v&lt; Tn &gt; &amp;&amp;void</type>
        <definition>requires is_street_v&lt;T1&gt;&amp;&amp; is_street_v&lt;Tn&gt;&amp;&amp; void dsm::Graph&lt; Id, Size &gt;::addStreets</definition>
        <argsstring>(T1 &amp;&amp;street, Tn &amp;&amp;... streets)</argsstring>
        <name>addStreets</name>
        <param>
          <type>T1 &amp;&amp;</type>
          <declname>street</declname>
        </param>
        <param>
          <type>Tn &amp;&amp;...</type>
          <declname>streets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="93" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a93f4a6ca599ac9cb2de508eb100c9052" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>shared&lt; <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Id, bool &gt; &gt;</type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; shared&lt; SparseMatrix&lt; Id, bool &gt; &gt; dsm::Graph&lt; Id, Size &gt;::adjMatrix</definition>
        <argsstring>() const</argsstring>
        <name>adjMatrix</name>
        <briefdescription>
<para>Get the graph&apos;s adjacency matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A std::shared_ptr to the graph&apos;s adjacency matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="97" column="12" bodyfile="src/dsm/headers/Graph.hpp" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1a00fd4b0f7e95c0cd6564a30819654178" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; Id, shared&lt; <ref refid="classdsm_1_1Node" kindref="compound">Node</ref>&lt; Id &gt; &gt; &gt;</type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; std::unordered_map&lt; Id, shared&lt; Node&lt; Id &gt; &gt; &gt; dsm::Graph&lt; Id, Size &gt;::nodeSet</definition>
        <argsstring>() const</argsstring>
        <name>nodeSet</name>
        <briefdescription>
<para>Get the graph&apos;s node map. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A std::unordered_map containing the graph&apos;s nodes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="100" column="24" bodyfile="src/dsm/headers/Graph.hpp" bodystart="259" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1ac15a4597ad8f61365b2ecc7ef40a4b82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; Id, shared&lt; <ref refid="classdsm_1_1Street" kindref="compound">Street</ref>&lt; Id, Size &gt; &gt; &gt;</type>
        <definition>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; std::unordered_map&lt; Id, shared&lt; Street&lt; Id, Size &gt; &gt; &gt; dsm::Graph&lt; Id, Size &gt;::streetSet</definition>
        <argsstring>() const</argsstring>
        <name>streetSet</name>
        <briefdescription>
<para>Get the graph&apos;s street map. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A std::unordered_map containing the graph&apos;s streets </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="103" column="24" bodyfile="src/dsm/headers/Graph.hpp" bodystart="265" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1ab3bbe774910d3d516b3de6036c54a59c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
        </templateparamlist>
        <type>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; requires is_node_v&lt; T1 &gt; &amp;&amp;is_node_v&lt; Tn &gt; &amp;&amp;void</type>
        <definition>requires std::unsigned_integral&lt;Id&gt;&amp;&amp; std::unsigned_integral&lt;Size&gt; requires is_node_v&lt;T1&gt;&amp;&amp; is_node_v&lt;Tn&gt;&amp;&amp; void dsm::Graph&lt; Id, Size &gt;::addNodes</definition>
        <argsstring>(T1 &amp;&amp;node, Tn &amp;&amp;... nodes)</argsstring>
        <name>addNodes</name>
        <param>
          <type>T1 &amp;&amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>Tn &amp;&amp;...</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="219" column="14" bodyfile="src/dsm/headers/Graph.hpp" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1Graph_1ad80a0a365a58c7a8b7741eaf20b72692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tn</declname>
            <defname>Tn</defname>
          </param>
        </templateparamlist>
        <type>requires std::unsigned_integral&lt; Id &gt; &amp;&amp;std::unsigned_integral&lt; Size &gt; requires is_street_v&lt; T1 &gt; &amp;&amp;is_street_v&lt; Tn &gt; &amp;&amp;void</type>
        <definition>requires std::unsigned_integral&lt;Id&gt;&amp;&amp; std::unsigned_integral&lt;Size&gt; requires is_street_v&lt;T1&gt;&amp;&amp; is_street_v&lt;Tn&gt;&amp;&amp; void dsm::Graph&lt; Id, Size &gt;::addStreets</definition>
        <argsstring>(T1 &amp;&amp;street, Tn &amp;&amp;... streets)</argsstring>
        <name>addStreets</name>
        <param>
          <type>T1 &amp;&amp;</type>
          <declname>street</declname>
        </param>
        <param>
          <type>Tn &amp;&amp;...</type>
          <declname>streets</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/Graph.hpp" line="246" column="14" bodyfile="src/dsm/headers/Graph.hpp" bodystart="246" bodyend="249"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classdsm_1_1Graph" kindref="compound">Graph</ref> class represents a graph in the network. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Id</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the graph&apos;s id. It must be an unsigned integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Size</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the graph&apos;s capacity. It must be an unsigned integral type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="src/dsm/headers/Graph.hpp" line="41" column="3" bodyfile="src/dsm/headers/Graph.hpp" bodystart="41" bodyend="104"/>
    <listofallmembers>
      <member refid="classdsm_1_1Graph_1a856d0f814897cd45d3a111fbdba6ddc3" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addNode</name></member>
      <member refid="classdsm_1_1Graph_1a797d512830effa735a4dad12292bb9be" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addNode</name></member>
      <member refid="classdsm_1_1Graph_1a997d6dd63bbf73cf334904e10f7a7fb1" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addNodes</name></member>
      <member refid="classdsm_1_1Graph_1ab3bbe774910d3d516b3de6036c54a59c" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addNodes</name></member>
      <member refid="classdsm_1_1Graph_1accc4186d12b8d08582036834b564a6ad" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addStreet</name></member>
      <member refid="classdsm_1_1Graph_1a30c764118503fe2a279e263cd943c791" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addStreet</name></member>
      <member refid="classdsm_1_1Graph_1a7e7d4b3fef65256c064bdec785b22a4f" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addStreets</name></member>
      <member refid="classdsm_1_1Graph_1ad80a0a365a58c7a8b7741eaf20b72692" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>addStreets</name></member>
      <member refid="classdsm_1_1Graph_1a93f4a6ca599ac9cb2de508eb100c9052" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>adjMatrix</name></member>
      <member refid="classdsm_1_1Graph_1a379d1051a9596957286543e262b4514c" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>buildAdj</name></member>
      <member refid="classdsm_1_1Graph_1ae515dc05e641ae032f51ee1332831b98" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>Graph</name></member>
      <member refid="classdsm_1_1Graph_1a45b7fe1d389f2f67981d1ce46be20128" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>Graph</name></member>
      <member refid="classdsm_1_1Graph_1a87e97609bcc593f80a7e568320b1a7d1" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>Graph</name></member>
      <member refid="classdsm_1_1Graph_1a12485e07ca4397cdc21cc75e26fdd89f" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>importAdj</name></member>
      <member refid="classdsm_1_1Graph_1aa0f10644c6e30df6880f0c8c26a111d6" prot="private" virt="non-virtual"><scope>dsm::Graph</scope><name>m_adjacency</name></member>
      <member refid="classdsm_1_1Graph_1a82bd6998f115d9d05872fb1438dc766e" prot="private" virt="non-virtual"><scope>dsm::Graph</scope><name>m_nodes</name></member>
      <member refid="classdsm_1_1Graph_1a82ddbe1275584645f173db51828d202f" prot="private" virt="non-virtual"><scope>dsm::Graph</scope><name>m_streets</name></member>
      <member refid="classdsm_1_1Graph_1a00fd4b0f7e95c0cd6564a30819654178" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>nodeSet</name></member>
      <member refid="classdsm_1_1Graph_1a9e92893bc7e521463ea8cf29ec2f1ed8" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>requires</name></member>
      <member refid="classdsm_1_1Graph_1a50b4842d5f8eab859141f56bf61aa986" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>requires</name></member>
      <member refid="classdsm_1_1Graph_1ac15a4597ad8f61365b2ecc7ef40a4b82" prot="public" virt="non-virtual"><scope>dsm::Graph</scope><name>streetSet</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
