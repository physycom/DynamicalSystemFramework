<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="SparseMatrix_8hpp" kind="file" language="C++">
    <compoundname>SparseMatrix.hpp</compoundname>
    <includes local="no">concepts</includes>
    <includes local="no">iostream</includes>
    <includes local="no">limits</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includedby refid="dsm_8hpp" local="yes">src/dsm/dsm.hpp</includedby>
    <includedby refid="Agent_8hpp" local="yes">src/dsm/headers/Agent.hpp</includedby>
    <includedby refid="Graph_8hpp" local="yes">src/dsm/headers/Graph.hpp</includedby>
    <includedby refid="Itinerary_8hpp" local="yes">src/dsm/headers/Itinerary.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/dsm/headers/SparseMatrix.hpp</label>
        <link refid="SparseMatrix_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>concepts</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>limits</label>
      </node>
      <node id="5">
        <label>stdexcept</label>
      </node>
      <node id="6">
        <label>string</label>
      </node>
      <node id="7">
        <label>typeinfo</label>
      </node>
      <node id="8">
        <label>unordered_map</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classdsm_1_1SparseMatrix" prot="public">dsm::SparseMatrix</innerclass>
    <innernamespace refid="namespacedsm">dsm</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SparseMatrix_hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SparseMatrix_hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;concepts&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">dsm<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="27" refid="classdsm_1_1SparseMatrix" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;Index,<sp/>T&gt;<sp/>_matrix;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/>_rows,<sp/>_cols;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">T</ref><sp/>_defaultReturn;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">rows</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">cols</ref>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/>index);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1ab6b3473077ffbfbe137212698fdb5f34" kindref="member">insert</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">i</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">j</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">T</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1ab6b3473077ffbfbe137212698fdb5f34" kindref="member">insert</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">i</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">T</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a591d522596eabd972bc440e90863e850" kindref="member">insert_or_assign</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">i</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">j</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">T</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a591d522596eabd972bc440e90863e850" kindref="member">insert_or_assign</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/>index,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">T</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1ad8c9da7dc8cb3c5d20555b77d371102c" kindref="member">erase</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">i</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">j</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a8f46edacde72b5536601aa34afdf6c9c" kindref="member">eraseRow</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/>index);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a79b1b4382f46151b2d041323f4f0cd87" kindref="member">eraseColumn</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/>index);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1ad70bb2e39855717832d70ddf3f5fbc40" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1abc2c366b7df2603f5b7ea76fcc502326" kindref="member">contains</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">i</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">j</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1abc2c366b7df2603f5b7ea76fcc502326" kindref="member">contains</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;Index, int&gt;</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1ae0f8a3682264568f0637b181f39e29f3" kindref="member">getDegreeVector</ref>();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;Index, double&gt;</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1ae58a3ca0ad970f7c3e7466a45ea25591" kindref="member">getStrengthVector</ref>();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;Index, int&gt;</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1a762f5c6e5c53aca71b6c4ff4268d1f06" kindref="member">getLaplacian</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1a38beec1dc82c27fb3d20adf5f0f35c20" kindref="member">getRow</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1a74f5db866384afbc89a25946c041cf75" kindref="member">getCol</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;Index, double&gt;</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1ad6ddec658daf21afae7f3f45a9e9c771" kindref="member">getNormRows</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;Index, double&gt;</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1a2e50f75dd63f015a8b6d67a303a01339" kindref="member">getNormCols</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1ac8866f3f41f20a84dcc476da3633d1cd" kindref="member">getRowDim</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1a324fef44afb80419ddadf75c07aa5baa" kindref="member">getColDim</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1abdc6b47c390b02810982fc2025fe25b6" kindref="member">size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1a01ba0d4bb2c3b39bcf1baa39a565d381" kindref="member">max_size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1ac514a1ba68b6b76ab41c04a63a182533" kindref="member">symmetrize</ref>();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a5ca3ccd61b5f0909edccc4b717468c79" kindref="member">reshape</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">rows</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">cols</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a5ca3ccd61b5f0909edccc4b717468c79" kindref="member">reshape</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">dim</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::unordered_map&lt;Index,<sp/>T&gt;::const_iterator<sp/><ref refid="classdsm_1_1SparseMatrix_1a892a480a2b01a235761febce912ed931" kindref="member">begin</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::unordered_map&lt;Index,<sp/>T&gt;::const_iterator<sp/><ref refid="classdsm_1_1SparseMatrix_1ad79de75b148c1efac96c15e7739ed147" kindref="member">end</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">T</ref>&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1a6860c09d6293e53ed9633f5943b86075" kindref="member">operator()</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">i</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">j</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">T</ref>&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1a6860c09d6293e53ed9633f5943b86075" kindref="member">operator()</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">i</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">j</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">T</ref>&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1a6860c09d6293e53ed9633f5943b86075" kindref="member">operator()</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">T</ref>&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1a6860c09d6293e53ed9633f5943b86075" kindref="member">operator()</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref><sp/>index);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;I&gt;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;Index, T&gt;</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1a91bd4c01d3181be7b297ecd9a4914888" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;I, U&gt;</ref>&amp;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;_rows<sp/>!=<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>._rows<sp/>||<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">this</ref>-&gt;_cols<sp/>!=<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>._cols)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;SparseMatrix:<sp/>dimensions<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">result</ref><sp/>=<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;Index, T&gt;</ref>(this-&gt;_rows,<sp/>this-&gt;_cols);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;Index,<sp/>bool&gt;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">unique</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref><sp/>:<sp/>this-&gt;_matrix)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">unique</ref>.insert_or_assign(<ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref><sp/>:<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>._matrix)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">unique</ref>.insert_or_assign(<ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref><sp/>:<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">unique</ref>)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">result</ref>.insert(<ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first<sp/>/<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">this</ref>-&gt;_cols,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first<sp/>%<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">this</ref>-&gt;_cols,<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(<ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first)<sp/>+<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first));</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;I&gt;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;Index, T&gt;</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1a54b3d02da778b737f276aeb700034569" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;I, U&gt;</ref>&amp;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;_rows<sp/>!=<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>._rows<sp/>||<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">this</ref>-&gt;_cols<sp/>!=<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>._cols)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;SparseMatrix:<sp/>dimensions<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">result</ref><sp/>=<sp/><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>(this-&gt;_rows,<sp/>this-&gt;_cols);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;Index,<sp/>bool&gt;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">unique</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref><sp/>:<sp/>this-&gt;_matrix)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">unique</ref>.insert_or_assign(<ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref><sp/>:<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>._matrix)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">unique</ref>.insert_or_assign(<ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref><sp/>:<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">unique</ref>)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">result</ref>.insert(<ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first<sp/>/<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">this</ref>-&gt;_cols,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first<sp/>%<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">this</ref>-&gt;_cols,<sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(<ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first)<sp/>-<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>(<ref refid="classdsm_1_1Itinerary" kindref="compound">it</ref>.first));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref><sp/><ref refid="classdsm_1_1SparseMatrix_1a54e568a8554b883278ad72cdd4384baa" kindref="member">operator++</ref>();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;I&gt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1aa90b33f56364b548294485cd0cbb73c6" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;I, U&gt;</ref>&amp;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;I&gt;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1a91895519f35ff4c734fd02dd2fbd37ab" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">SparseMatrix&lt;I, U&gt;</ref>&amp;<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">other</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix&lt;Index, T&gt;::SparseMatrix</ref>()</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_matrix{std::<ref refid="classdsm_1_1Itinerary" kindref="compound">unordered_map</ref>&lt;<ref refid="classdsm_1_1Itinerary" kindref="compound">Index</ref>,<sp/><ref refid="classdsm_1_1Itinerary" kindref="compound">T</ref>&gt;()},<sp/>_rows{},<sp/>_cols{},<sp/>_defaultReturn{0}<sp/>{}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>T&gt;::SparseMatrix(Index<sp/>rows,<sp/>Index<sp/>cols)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_matrix{std::unordered_map&lt;Index,<sp/>T&gt;()},<sp/>_rows{rows},<sp/>_cols{cols},<sp/>_defaultReturn{0}<sp/>{}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>T&gt;::SparseMatrix(Index<sp/>index)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>_matrix{std::unordered_map&lt;Index,<sp/>T&gt;()},<sp/>_rows{index},<sp/>_cols{1},<sp/>_defaultReturn{0}<sp/>{}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1ab6b3473077ffbfbe137212698fdb5f34" kindref="member">SparseMatrix&lt;Index, T&gt;::insert</ref>(Index<sp/>i,<sp/>Index<sp/>j,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>_rows<sp/>||<sp/>j<sp/>&gt;=<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>_matrix.emplace(std::make_pair(i<sp/>*<sp/>_cols<sp/>+<sp/>j,<sp/>value));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1ab6b3473077ffbfbe137212698fdb5f34" kindref="member">SparseMatrix&lt;Index, T&gt;::insert</ref>(Index<sp/>i,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>_rows<sp/>*<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>_matrix.emplace(std::make_pair(i,<sp/>value));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a591d522596eabd972bc440e90863e850" kindref="member">SparseMatrix&lt;Index, T&gt;::insert_or_assign</ref>(Index<sp/>i,<sp/>Index<sp/>j,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>_rows<sp/>||<sp/>j<sp/>&gt;=<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>_matrix.insert_or_assign(i<sp/>*<sp/>_cols<sp/>+<sp/>j,<sp/>value);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a591d522596eabd972bc440e90863e850" kindref="member">SparseMatrix&lt;Index, T&gt;::insert_or_assign</ref>(Index<sp/>index,<sp/>T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>_rows<sp/>*<sp/>_cols<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>_matrix.insert_or_assign(index,<sp/>value);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1ad8c9da7dc8cb3c5d20555b77d371102c" kindref="member">SparseMatrix&lt;Index, T&gt;::erase</ref>(Index<sp/>i,<sp/>Index<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>_rows<sp/>||<sp/>j<sp/>&gt;=<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>_matrix.find(i<sp/>*<sp/>_cols<sp/>+<sp/>j)<sp/>!=<sp/>_matrix.end()</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>_matrix.erase(i<sp/>*<sp/>_cols<sp/>+<sp/>j)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;SparseMatrix:<sp/>element<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a8f46edacde72b5536601aa34afdf6c9c" kindref="member">SparseMatrix&lt;Index, T&gt;::eraseRow</ref>(Index<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>_rows<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Index<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_cols;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_matrix.erase(index<sp/>*<sp/>_cols<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;Index,<sp/>T&gt;<sp/>new_matrix<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[key,<sp/>value]<sp/>:<sp/>_matrix)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>/<sp/>_cols<sp/>&lt;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_matrix.emplace(std::make_pair(key,<sp/>value));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_matrix.emplace(std::make_pair(key<sp/>-<sp/>_cols,<sp/>value));</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>--_rows;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>_matrix<sp/>=<sp/>new_matrix;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a79b1b4382f46151b2d041323f4f0cd87" kindref="member">SparseMatrix&lt;Index, T&gt;::eraseColumn</ref>(Index<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>_cols<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Index<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_matrix.erase(i<sp/>*<sp/>_cols<sp/>+<sp/>index);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;Index,<sp/>T&gt;<sp/>new_matrix<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[key,<sp/>value]<sp/>:<sp/>_matrix)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>%<sp/>_cols<sp/>&lt;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_matrix.emplace(std::make_pair(key<sp/>-<sp/>key<sp/>/<sp/>_cols,<sp/>value));</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_matrix.emplace(std::make_pair(key<sp/>/<sp/>_cols<sp/>*<sp/>(_cols<sp/>-<sp/>1)<sp/>+<sp/>key<sp/>%<sp/>_cols<sp/>-<sp/>1,<sp/>value));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>--_cols;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>_matrix<sp/>=<sp/>new_matrix;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1ad70bb2e39855717832d70ddf3f5fbc40" kindref="member">SparseMatrix&lt;Index, T&gt;::clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>_matrix.clear();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>_rows<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>_cols<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1abc2c366b7df2603f5b7ea76fcc502326" kindref="member">SparseMatrix&lt;Index, T&gt;::contains</ref>(Index<sp/>i,<sp/>Index<sp/>j)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>_rows<sp/>||<sp/>j<sp/>&gt;=<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_matrix.contains(i<sp/>*<sp/>_cols<sp/>+<sp/>j);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1abc2c366b7df2603f5b7ea76fcc502326" kindref="member">SparseMatrix&lt;Index, T&gt;::contains</ref>(Index<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;<sp/>_rows<sp/>*<sp/>_cols<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_matrix.contains(index);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>int&gt;<sp/><ref refid="classdsm_1_1SparseMatrix_1ae0f8a3682264568f0637b181f39e29f3" kindref="member">SparseMatrix&lt;Index, T&gt;::getDegreeVector</ref>()<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rows<sp/>!=<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;SparseMatrix:<sp/>getDegreeVector<sp/>only<sp/>works<sp/>on<sp/>square<sp/>matrices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>degreeVector<sp/>=<sp/>SparseMatrix&lt;Index,<sp/>int&gt;(_rows,<sp/>1);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i<sp/>:<sp/>_matrix)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>degreeVector.insert_or_assign(i.first<sp/>/<sp/>_cols,<sp/>0,<sp/>degreeVector(i.first<sp/>/<sp/>_cols,<sp/>0)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>degreeVector;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>double&gt;<sp/><ref refid="classdsm_1_1SparseMatrix_1ae58a3ca0ad970f7c3e7466a45ea25591" kindref="member">SparseMatrix&lt;Index, T&gt;::getStrengthVector</ref>()<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rows<sp/>!=<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;SparseMatrix:<sp/>getStrengthVector<sp/>only<sp/>works<sp/>on<sp/>square<sp/>matrices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strengthVector<sp/>=<sp/>SparseMatrix&lt;Index,<sp/>double&gt;(_rows,<sp/>1);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i<sp/>:<sp/>_matrix)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strengthVector.insert_or_assign(i.first<sp/>/<sp/>_cols,<sp/>0,<sp/>strengthVector(i.first<sp/>/<sp/>_cols,<sp/>0)<sp/>+<sp/>i.second);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strengthVector;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>int&gt;<sp/><ref refid="classdsm_1_1SparseMatrix_1a762f5c6e5c53aca71b6c4ff4268d1f06" kindref="member">SparseMatrix&lt;Index, T&gt;::getLaplacian</ref>()<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rows<sp/>!=<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;SparseMatrix:<sp/>getLaplacian<sp/>only<sp/>works<sp/>on<sp/>square<sp/>matrices&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>laplacian<sp/>=<sp/>SparseMatrix&lt;Index,<sp/>int&gt;(_rows,<sp/>_cols);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>i<sp/>:<sp/>_matrix)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>laplacian.insert_or_assign(i.first<sp/>/<sp/>_cols,<sp/>i.first<sp/>%<sp/>_cols,<sp/>-1);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>degreeVector<sp/>=<sp/>this-&gt;getDegreeVector();</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Index<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_rows;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>laplacian.insert_or_assign(i,<sp/>i,<sp/>degreeVector(i,<sp/>0));</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>laplacian;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>T&gt;<sp/><ref refid="classdsm_1_1SparseMatrix_1a38beec1dc82c27fb3d20adf5f0f35c20" kindref="member">SparseMatrix&lt;Index, T&gt;::getRow</ref>(Index<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>_rows)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>SparseMatrix<sp/>row(1,<sp/>_cols);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>_matrix)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it.first<sp/>/<sp/>_cols<sp/>==<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row.insert(it.first<sp/>%<sp/>_cols,<sp/>it.second);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>row;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>T&gt;<sp/><ref refid="classdsm_1_1SparseMatrix_1a74f5db866384afbc89a25946c041cf75" kindref="member">SparseMatrix&lt;Index, T&gt;::getCol</ref>(Index<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>SparseMatrix<sp/>col(_rows,<sp/>1);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>_matrix)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it.first<sp/>%<sp/>_cols<sp/>==<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col.insert(it.first<sp/>/<sp/>_cols,<sp/>it.second);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>col;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>double&gt;<sp/><ref refid="classdsm_1_1SparseMatrix_1ad6ddec658daf21afae7f3f45a9e9c771" kindref="member">SparseMatrix&lt;Index, T&gt;::getNormRows</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>SparseMatrix&lt;Index,<sp/>double&gt;<sp/>normRows(_rows,<sp/>_cols);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Index<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>_rows;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>row<sp/>=<sp/>this-&gt;getRow(index);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>std::abs(it.second);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>&lt;<sp/>std::numeric_limits&lt;double&gt;::epsilon()<sp/>?<sp/>sum<sp/>=<sp/>1.<sp/>:<sp/>sum<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normRows.insert(it.first<sp/>+<sp/>index<sp/>*<sp/>_cols,<sp/>it.second<sp/>/<sp/>sum);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>normRows;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>double&gt;<sp/><ref refid="classdsm_1_1SparseMatrix_1a2e50f75dd63f015a8b6d67a303a01339" kindref="member">SparseMatrix&lt;Index, T&gt;::getNormCols</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>SparseMatrix&lt;Index,<sp/>double&gt;<sp/>normCols(_rows,<sp/>_cols);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Index<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>_cols;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>this-&gt;getCol(index);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>col)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>std::abs(it.second);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>&lt;<sp/>std::numeric_limits&lt;double&gt;::epsilon()<sp/>?<sp/>sum<sp/>=<sp/>1.<sp/>:<sp/>sum<sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>col)<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>normCols.insert(it.first<sp/>*<sp/>_cols<sp/>+<sp/>index,<sp/>it.second<sp/>/<sp/>sum);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>normCols;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>Index<sp/><ref refid="classdsm_1_1SparseMatrix_1ac8866f3f41f20a84dcc476da3633d1cd" kindref="member">SparseMatrix&lt;Index, T&gt;::getRowDim</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;_rows;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>Index<sp/><ref refid="classdsm_1_1SparseMatrix_1a324fef44afb80419ddadf75c07aa5baa" kindref="member">SparseMatrix&lt;Index, T&gt;::getColDim</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;_cols;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>Index<sp/><ref refid="classdsm_1_1SparseMatrix_1abdc6b47c390b02810982fc2025fe25b6" kindref="member">SparseMatrix&lt;Index, T&gt;::size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_matrix.size();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>Index<sp/><ref refid="classdsm_1_1SparseMatrix_1a01ba0d4bb2c3b39bcf1baa39a565d381" kindref="member">SparseMatrix&lt;Index, T&gt;::max_size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;_rows<sp/>*<sp/>this-&gt;_cols;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1ac514a1ba68b6b76ab41c04a63a182533" kindref="member">SparseMatrix&lt;Index, T&gt;::symmetrize</ref>()<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>+=<sp/>this-&gt;operator++();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a5ca3ccd61b5f0909edccc4b717468c79" kindref="member">SparseMatrix&lt;Index, T&gt;::reshape</ref>(Index<sp/>rows,<sp/>Index<sp/>cols)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;_rows<sp/>=<sp/>rows;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;_cols<sp/>=<sp/>cols;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/>_matrix;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>copy)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it.first<sp/>&gt;<sp/>rows<sp/>*<sp/>cols<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_matrix.erase(it.first);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdsm_1_1SparseMatrix_1a5ca3ccd61b5f0909edccc4b717468c79" kindref="member">SparseMatrix&lt;Index, T&gt;::reshape</ref>(Index<sp/>dim)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;_rows<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;_cols<sp/>=<sp/>dim;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/>_matrix;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>copy)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it.first<sp/>&gt;<sp/>dim<sp/>*<sp/>dim<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_matrix.erase(it.first);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::unordered_map&lt;Index,<sp/>T&gt;::const_iterator<sp/><ref refid="classdsm_1_1SparseMatrix_1a892a480a2b01a235761febce912ed931" kindref="member">SparseMatrix&lt;Index, T&gt;::begin</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_matrix.begin();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::unordered_map&lt;Index,<sp/>T&gt;::const_iterator<sp/><ref refid="classdsm_1_1SparseMatrix_1ad79de75b148c1efac96c15e7739ed147" kindref="member">SparseMatrix&lt;Index, T&gt;::end</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_matrix.end();</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1a6860c09d6293e53ed9633f5943b86075" kindref="member">SparseMatrix&lt;Index, T&gt;::operator()</ref>(Index<sp/>i,<sp/>Index<sp/>j)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>_rows<sp/>||<sp/>j<sp/>&gt;=<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>it<sp/>=<sp/>_matrix.find(i<sp/>*<sp/>_cols<sp/>+<sp/>j);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>!=<sp/>_matrix.end()<sp/>?<sp/>it-&gt;second<sp/>:<sp/>_defaultReturn;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>T&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1a6860c09d6293e53ed9633f5943b86075" kindref="member">SparseMatrix&lt;Index, T&gt;::operator()</ref>(Index<sp/>i,<sp/>Index<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>_rows<sp/>||<sp/>j<sp/>&gt;=<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>it<sp/>=<sp/>_matrix.find(i<sp/>*<sp/>_cols<sp/>+<sp/>j);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>!=<sp/>_matrix.end()<sp/>?<sp/>it-&gt;second<sp/>:<sp/>_defaultReturn;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1a6860c09d6293e53ed9633f5943b86075" kindref="member">SparseMatrix&lt;Index, T&gt;::operator()</ref>(Index<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>_rows<sp/>*<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>it<sp/>=<sp/>_matrix.find(index);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>!=<sp/>_matrix.end()<sp/>?<sp/>it-&gt;second<sp/>:<sp/>_defaultReturn;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>T&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1a6860c09d6293e53ed9633f5943b86075" kindref="member">SparseMatrix&lt;Index, T&gt;::operator()</ref>(Index<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>_rows<sp/>*<sp/>_cols)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight><highlight class="stringliteral">&quot;Index<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>it<sp/>=<sp/>_matrix.find(index);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it<sp/>!=<sp/>_matrix.end()<sp/>?<sp/>it-&gt;second<sp/>:<sp/>_defaultReturn;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>T&gt;<sp/><ref refid="classdsm_1_1SparseMatrix_1a54e568a8554b883278ad72cdd4384baa" kindref="member">SparseMatrix&lt;Index, T&gt;::operator++</ref>()<sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>transpost<sp/>=<sp/>SparseMatrix(this-&gt;_cols,<sp/>this-&gt;_rows);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>_matrix)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>transpost.insert(it.first<sp/>%<sp/>_cols,<sp/>it.first<sp/>/<sp/>_cols,<sp/>it.second);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transpost;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;I&gt;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>T&gt;&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1aa90b33f56364b548294485cd0cbb73c6" kindref="member">SparseMatrix&lt;Index, T&gt;::operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SparseMatrix&lt;I,<sp/>U&gt;&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;_rows<sp/>!=<sp/>other._rows<sp/>||<sp/>this-&gt;_cols<sp/>!=<sp/>other._cols)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;SparseMatrix:<sp/>dimensions<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>other._matrix)<sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;contains(it.first)<sp/>?<sp/>this-&gt;insert_or_assign(it.first,<sp/>this-&gt;operator()(it.first)<sp/>+<sp/>it.second)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>this-&gt;insert(it.first,<sp/>it.second);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Index,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;Index&gt;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>std::unsigned_integral&lt;I&gt;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>SparseMatrix&lt;Index,<sp/>T&gt;&amp;<sp/><ref refid="classdsm_1_1SparseMatrix_1a91895519f35ff4c734fd02dd2fbd37ab" kindref="member">SparseMatrix&lt;Index, T&gt;::operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SparseMatrix&lt;I,<sp/>U&gt;&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;_rows<sp/>!=<sp/>other._rows<sp/>||<sp/>this-&gt;_cols<sp/>!=<sp/>other._cols)<sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;SparseMatrix:<sp/>dimensions<sp/>do<sp/>not<sp/>match&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>it<sp/>:<sp/>other._matrix)<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;contains(it.first)<sp/>?<sp/>this-&gt;insert_or_assign(it.first,<sp/>this-&gt;operator()(it.first)<sp/>-<sp/>it.second)</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>this-&gt;insert(it.first,<sp/>-it.second);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal">};<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dsm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/dsm/headers/SparseMatrix.hpp"/>
  </compounddef>
</doxygen>
