<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classdsm_1_1SparseMatrix" kind="class" language="C++" prot="public">
    <compoundname>dsm::SparseMatrix</compoundname>
    <includes local="no">SparseMatrix.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Index</type>
      </param>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdsm_1_1SparseMatrix_1a30d57be7953a27be5644ea4268a9637f" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; Index, T &gt;</type>
        <definition>std::unordered_map&lt;Index, T&gt; dsm::SparseMatrix&lt; Index, T &gt;::_matrix</definition>
        <argsstring></argsstring>
        <name>_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="29" column="24" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsm_1_1SparseMatrix_1a276157c8e17c2fbf84cf7baf152ef097" prot="private" static="no" mutable="no">
        <type>Index</type>
        <definition>Index dsm::SparseMatrix&lt; Index, T &gt;::_rows</definition>
        <argsstring></argsstring>
        <name>_rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="30" column="11" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsm_1_1SparseMatrix_1a85714cae09568767fa0c8fc3035b8b89" prot="private" static="no" mutable="no">
        <type>Index</type>
        <definition>Index dsm::SparseMatrix&lt; Index, T &gt;::_cols</definition>
        <argsstring></argsstring>
        <name>_cols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="30" column="17" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdsm_1_1SparseMatrix_1ac3844e70ee4f66e99fbb614f98b401fa" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T dsm::SparseMatrix&lt; Index, T &gt;::_defaultReturn</definition>
        <argsstring></argsstring>
        <name>_defaultReturn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="31" column="7" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a50b55ef6d77f882ed7064ea7d06cfe54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>requires std::unsigned_integral&lt; Index &gt; dsm::SparseMatrix&lt; Index, T &gt;::SparseMatrix</definition>
        <argsstring>()</argsstring>
        <name>SparseMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="34" column="5" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="289" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a4a1ad35ac8a796355028883826a44f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>requires std::unsigned_integral&lt; Index &gt; dsm::SparseMatrix&lt; Index, T &gt;::SparseMatrix</definition>
        <argsstring>(Index rows, Index cols)</argsstring>
        <name>SparseMatrix</name>
        <param>
          <type>Index</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
<para><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if rows or cols are &lt; 0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="40" column="5" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="294" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a0d36e25ae348dc66c6e90e80ecc41c55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>requires std::unsigned_integral&lt; Index &gt; dsm::SparseMatrix&lt; Index, T &gt;::SparseMatrix</definition>
        <argsstring>(Index index)</argsstring>
        <name>SparseMatrix</name>
        <param>
          <type>Index</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref> constructor - colum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>if index is &lt; 0 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="45" column="5" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="299" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a492040f03e7ca8642aa2fde70cd42c73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::insert</definition>
        <argsstring>(Index i, Index j, T value)</argsstring>
        <name>insert</name>
        <param>
          <type>Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>insert a value in the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="52" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="304" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a3efa1838bd32378023f615302bdcd686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::insert</definition>
        <argsstring>(Index i, T value)</argsstring>
        <name>insert</name>
        <param>
          <type>Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>insert a value in the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="58" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="315" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1abb586ab0a9fbc5f2b035af3b6313a019" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::insert_or_assign</definition>
        <argsstring>(Index i, Index j, T value)</argsstring>
        <name>insert_or_assign</name>
        <param>
          <type>Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>insert a value in the matrix. If the element already exist, it overwrites it </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="66" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="326" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a655c2acdb2c8b3731719fdd7a0dccb1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::insert_or_assign</definition>
        <argsstring>(Index index, T value)</argsstring>
        <name>insert_or_assign</name>
        <param>
          <type>Index</type>
          <declname>index</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>insert a value in the matrix. If the element already exist, it overwrites it </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index in vectorial form </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="73" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="337" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1af0877cdba2a13b6ebffce8160f1a702f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::insert_and_expand</definition>
        <argsstring>(Index i, Index j, T value)</argsstring>
        <name>insert_and_expand</name>
        <param>
          <type>Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>j</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>insert a value in the matrix and expand the matrix if necessary. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to insert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="79" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="348" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1aa6fa072085421ac384ccc51643a5ad71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::erase</definition>
        <argsstring>(Index i, Index j)</argsstring>
        <name>erase</name>
        <param>
          <type>Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>remove a value from the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the element is not found </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="86" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="368" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a33dbc949d34d34a1357fc42db61c15e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::erase</definition>
        <argsstring>(Index index)</argsstring>
        <name>erase</name>
        <param>
          <type>Index</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>remove a value from the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index in vectorial form </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the element is not found </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="92" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="384" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1ab90fbdc9bef8a76372794f6c5663e379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::eraseRow</definition>
        <argsstring>(Index index)</argsstring>
        <name>eraseRow</name>
        <param>
          <type>Index</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>remove a row from the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="97" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="400" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a1c2500e9a378261858f9080168cd8a70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::eraseColumn</definition>
        <argsstring>(Index index)</argsstring>
        <name>eraseColumn</name>
        <param>
          <type>Index</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>remove a column from the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="102" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="423" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a48287852ed2a75ec39a20ba62603965f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>empty the matrix and set the dimensions to zero </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="105" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="446" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a57384e33f75162bf97d464f1a73b7275" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; bool dsm::SparseMatrix&lt; Index, T &gt;::contains</definition>
        <argsstring>(Index i, Index j) const</argsstring>
        <name>contains</name>
        <param>
          <type>Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>check if the element is non zero </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the element is non zero </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="112" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="454" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1ab553af75991a9a071706d9c7442bee42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; bool dsm::SparseMatrix&lt; Index, T &gt;::contains</definition>
        <argsstring>(Index const index) const</argsstring>
        <name>contains</name>
        <param>
          <type>Index const</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>check if the element is non zero </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index in vectorial form </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the element is non zero </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="118" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="465" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a9678cdb744ee265b8287384381bc970d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Index, int &gt;</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; SparseMatrix&lt; Index, int &gt; dsm::SparseMatrix&lt; Index, T &gt;::getDegreeVector</definition>
        <argsstring>()</argsstring>
        <name>getDegreeVector</name>
        <briefdescription>
<para>get the input degree of all nodes </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref> vector with the input degree of all nodes </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the matrix is not square </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="123" column="18" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="476" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a481674fb8b567fe33c53eeb969fe8bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Index, double &gt;</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; SparseMatrix&lt; Index, double &gt; dsm::SparseMatrix&lt; Index, T &gt;::getStrengthVector</definition>
        <argsstring>()</argsstring>
        <name>getStrengthVector</name>
        <briefdescription>
<para>get the strength of all nodes </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref> vector with the strength of all nodes </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the matrix is not square </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="128" column="18" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="491" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1aeaa3dc462bf0c6786b067ff27be7c837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Index, int &gt;</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; SparseMatrix&lt; Index, int &gt; dsm::SparseMatrix&lt; Index, T &gt;::getLaplacian</definition>
        <argsstring>()</argsstring>
        <name>getLaplacian</name>
        <briefdescription>
<para>get the laplacian matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the laplacian matrix </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the matrix is not square </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="133" column="18" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="506" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a2db82a51ef907957266444c5ca561eaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref></type>
        <definition>requires std::unsigned_integral&lt; Index &gt; SparseMatrix&lt; Index, T &gt; dsm::SparseMatrix&lt; Index, T &gt;::getRow</definition>
        <argsstring>(Index index) const</argsstring>
        <name>getRow</name>
        <param>
          <type>Index</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>get a row as a row vector </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a row vector </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="139" column="18" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="525" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a8b8775939be49a5ccf8cfc3346e3c051" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref></type>
        <definition>requires std::unsigned_integral&lt; Index &gt; SparseMatrix&lt; Index, T &gt; dsm::SparseMatrix&lt; Index, T &gt;::getCol</definition>
        <argsstring>(Index index) const</argsstring>
        <name>getCol</name>
        <param>
          <type>Index</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>get a column as a column vector </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a column vector </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="145" column="18" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="542" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a7c22bd85d2453b5e750ca3cad4fe0e95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Index, double &gt;</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; SparseMatrix&lt; Index, double &gt; dsm::SparseMatrix&lt; Index, T &gt;::getNormRows</definition>
        <argsstring>() const</argsstring>
        <name>getNormRows</name>
        <briefdescription>
<para>get a matrix of double with every row normalized to 1 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a matrix of double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="149" column="18" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="559" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1ab4594b100f9f4c3306e04cccff7e1b00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Index, double &gt;</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; SparseMatrix&lt; Index, double &gt; dsm::SparseMatrix&lt; Index, T &gt;::getNormCols</definition>
        <argsstring>() const</argsstring>
        <name>getNormCols</name>
        <briefdescription>
<para>get a matrix of double with every column normalized to 1 </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a matrix of double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="153" column="18" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="577" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1ad11afd5ce431d2b966ce8a6dd43fb010" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Index</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; Index dsm::SparseMatrix&lt; Index, T &gt;::getRowDim</definition>
        <argsstring>() const</argsstring>
        <name>getRowDim</name>
        <briefdescription>
<para>get the number of rows </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of rows </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="157" column="11" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="595" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a7a26cbcb48add01159687a2dce0af1fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Index</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; Index dsm::SparseMatrix&lt; Index, T &gt;::getColDim</definition>
        <argsstring>() const</argsstring>
        <name>getColDim</name>
        <briefdescription>
<para>get the number of columns </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of columns </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="161" column="11" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="601" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a31c1ecaf62652757d8e02527a5f25a80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Index</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; Index dsm::SparseMatrix&lt; Index, T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>get the number of non zero elements in the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of non zero elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="165" column="11" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="607" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1ad89567696887d9dfbee87795c0c6285d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Index</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; Index dsm::SparseMatrix&lt; Index, T &gt;::max_size</definition>
        <argsstring>() const</argsstring>
        <name>max_size</name>
        <briefdescription>
<para>get the maximum number of elements in the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>maximum number of elements </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="169" column="11" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="613" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1aa726011b476e3da1b31bfb20a0ff7174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::symmetrize</definition>
        <argsstring>()</argsstring>
        <name>symmetrize</name>
        <briefdescription>
<para>symmetrize the matrix </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="172" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="619" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a51334882e61e39a865b22cc157168647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::reshape</definition>
        <argsstring>(Index rows, Index cols)</argsstring>
        <name>reshape</name>
        <param>
          <type>Index</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>cols</declname>
        </param>
        <briefdescription>
<para>reshape the matrix </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="175" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="625" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a63f514cfb61078375437e060e338de7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; void dsm::SparseMatrix&lt; Index, T &gt;::reshape</definition>
        <argsstring>(Index dim)</argsstring>
        <name>reshape</name>
        <param>
          <type>Index</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
<para>reshape the matrix </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="178" column="10" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="640" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1ad7e1eaa769a97ef872b41f6e6470400d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; Index, T &gt;::const_iterator</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; std::unordered_map&lt; Index, T &gt;::const_iterator dsm::SparseMatrix&lt; Index, T &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>return the begin iterator of the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the begin iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="182" column="50" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="654" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a2bef1265fcc398018886e922e9dc8a32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; Index, T &gt;::const_iterator</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; std::unordered_map&lt; Index, T &gt;::const_iterator dsm::SparseMatrix&lt; Index, T &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>return the end iterator of the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the end iterator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="186" column="50" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="660" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1ac03d4bdbd9b86a1b6cc195b26517e5a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; const T &amp; dsm::SparseMatrix&lt; Index, T &gt;::operator()</definition>
        <argsstring>(Index i, Index j) const</argsstring>
        <name>operator()</name>
        <param>
          <type>Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>access an element of the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the element </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="193" column="13" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="666" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a1c7de44b13b5549ed9b9e2da9412ea64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; T &amp; dsm::SparseMatrix&lt; Index, T &gt;::operator()</definition>
        <argsstring>(Index i, Index j)</argsstring>
        <name>operator()</name>
        <param>
          <type>Index</type>
          <declname>i</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>access an element of the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>row index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the element </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="200" column="7" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="678" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1ad379e300d6b825983ace5fbad5332ca3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; const T &amp; dsm::SparseMatrix&lt; Index, T &gt;::operator()</definition>
        <argsstring>(Index index) const</argsstring>
        <name>operator()</name>
        <param>
          <type>Index</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>access an element of the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index in vectorial form </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the element </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="206" column="13" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="690" bodyend="698"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1af32c5e52810f45bce04c54b1678b9dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T &amp;</type>
        <definition>requires std::unsigned_integral&lt; Index &gt; T &amp; dsm::SparseMatrix&lt; Index, T &gt;::operator()</definition>
        <argsstring>(Index index)</argsstring>
        <name>operator()</name>
        <param>
          <type>Index</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>access an element of the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>index in vectorial form </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the element </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::out_of_range</parametername>
</parameternamelist>
<parameterdescription>
<para>if the index is out of range </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="212" column="7" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="702" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1aabd47e611ef8e2456b6e7307c3252890" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>requires std::unsigned_integral&lt; I &gt; <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Index, T &gt;</type>
        <definition>requires std::unsigned_integral&lt;I&gt; SparseMatrix&lt;Index, T&gt; dsm::SparseMatrix&lt; Index, T &gt;::operator+</definition>
        <argsstring>(const SparseMatrix&lt; I, U &gt; &amp;other)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; I, U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>sum of two matrices </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the other matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the sum of the two matrices </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the dimensions do not match </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="220" column="18" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="220" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1ab75404692818cf899304cac8704e185d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>requires std::unsigned_integral&lt; I &gt; <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Index, T &gt;</type>
        <definition>requires std::unsigned_integral&lt;I&gt; SparseMatrix&lt;Index, T&gt; dsm::SparseMatrix&lt; Index, T &gt;::operator-</definition>
        <argsstring>(const SparseMatrix&lt; I, U &gt; &amp;other)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; I, U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>difference of two matrices </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the other matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the difference of the two matrices </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the dimensions do not match </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="246" column="18" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="246" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1ac89861a861a1d84076882380e6474d46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref></type>
        <definition>requires std::unsigned_integral&lt; Index &gt; SparseMatrix&lt; Index, T &gt; dsm::SparseMatrix&lt; Index, T &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>transpose the matrix </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the transposed matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="268" column="18" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="714" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a09f78d83dc057aaa6865ac6cd91ab43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>requires std::unsigned_integral&lt; I &gt; <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref> &amp;</type>
        <definition>requires std::unsigned_integral&lt;I&gt; SparseMatrix&amp; dsm::SparseMatrix&lt; Index, T &gt;::operator+=</definition>
        <argsstring>(const SparseMatrix&lt; I, U &gt; &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; I, U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>sum of two matrices </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the other matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the sum of the two matrices </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the dimensions do not match </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="276" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a5c6f729555f6b6f051a4b13cb747041a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>requires std::unsigned_integral&lt; I &gt; <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref> &amp;</type>
        <definition>requires std::unsigned_integral&lt;I&gt; SparseMatrix&amp; dsm::SparseMatrix&lt; Index, T &gt;::operator-=</definition>
        <argsstring>(const SparseMatrix&lt; I, U &gt; &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; I, U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>difference of two matrices </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>the other matrix </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the difference of the two matrices </para>
</simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::runtime_error</parametername>
</parameternamelist>
<parameterdescription>
<para>if the dimensions do not match </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="284" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a09325308f2fbf11ffbc2b9043f4fb0b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>requires std::unsigned_integral&lt; Index &gt; requires std::unsigned_integral&lt; I &gt; <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Index, T &gt; &amp;</type>
        <definition>requires std::unsigned_integral&lt;Index&gt; requires std::unsigned_integral&lt;I&gt; SparseMatrix&lt;Index, T&gt;&amp; dsm::SparseMatrix&lt; Index, T &gt;::operator+=</definition>
        <argsstring>(const SparseMatrix&lt; I, U &gt; &amp;other)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; I, U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="726" column="29" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="726" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classdsm_1_1SparseMatrix_1a9ed7c96e2f7cf29f78e5cf9648570ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename I</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>requires std::unsigned_integral&lt; Index &gt; requires std::unsigned_integral&lt; I &gt; <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; Index, T &gt; &amp;</type>
        <definition>requires std::unsigned_integral&lt;Index&gt; requires std::unsigned_integral&lt;I&gt; SparseMatrix&lt;Index, T&gt;&amp; dsm::SparseMatrix&lt; Index, T &gt;::operator-=</definition>
        <argsstring>(const SparseMatrix&lt; I, U &gt; &amp;other)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref>&lt; I, U &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dsm/headers/SparseMatrix.hpp" line="743" column="29" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="743" bodyend="754"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classdsm_1_1SparseMatrix" kindref="compound">SparseMatrix</ref> class represents a sparse matrix. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix&apos;s index. It must be an unsigned integral type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the matrix&apos;s value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="src/dsm/headers/SparseMatrix.hpp" line="28" column="3" bodyfile="src/dsm/headers/SparseMatrix.hpp" bodystart="28" bodyend="285"/>
    <listofallmembers>
      <member refid="classdsm_1_1SparseMatrix_1a85714cae09568767fa0c8fc3035b8b89" prot="private" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>_cols</name></member>
      <member refid="classdsm_1_1SparseMatrix_1ac3844e70ee4f66e99fbb614f98b401fa" prot="private" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>_defaultReturn</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a30d57be7953a27be5644ea4268a9637f" prot="private" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>_matrix</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a276157c8e17c2fbf84cf7baf152ef097" prot="private" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>_rows</name></member>
      <member refid="classdsm_1_1SparseMatrix_1ad7e1eaa769a97ef872b41f6e6470400d" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>begin</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a48287852ed2a75ec39a20ba62603965f" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>clear</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a57384e33f75162bf97d464f1a73b7275" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>contains</name></member>
      <member refid="classdsm_1_1SparseMatrix_1ab553af75991a9a071706d9c7442bee42" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>contains</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a2bef1265fcc398018886e922e9dc8a32" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>end</name></member>
      <member refid="classdsm_1_1SparseMatrix_1aa6fa072085421ac384ccc51643a5ad71" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>erase</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a33dbc949d34d34a1357fc42db61c15e5" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>erase</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a1c2500e9a378261858f9080168cd8a70" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>eraseColumn</name></member>
      <member refid="classdsm_1_1SparseMatrix_1ab90fbdc9bef8a76372794f6c5663e379" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>eraseRow</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a8b8775939be49a5ccf8cfc3346e3c051" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>getCol</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a7a26cbcb48add01159687a2dce0af1fb" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>getColDim</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a9678cdb744ee265b8287384381bc970d" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>getDegreeVector</name></member>
      <member refid="classdsm_1_1SparseMatrix_1aeaa3dc462bf0c6786b067ff27be7c837" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>getLaplacian</name></member>
      <member refid="classdsm_1_1SparseMatrix_1ab4594b100f9f4c3306e04cccff7e1b00" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>getNormCols</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a7c22bd85d2453b5e750ca3cad4fe0e95" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>getNormRows</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a2db82a51ef907957266444c5ca561eaa" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>getRow</name></member>
      <member refid="classdsm_1_1SparseMatrix_1ad11afd5ce431d2b966ce8a6dd43fb010" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>getRowDim</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a481674fb8b567fe33c53eeb969fe8bd6" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>getStrengthVector</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a492040f03e7ca8642aa2fde70cd42c73" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>insert</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a3efa1838bd32378023f615302bdcd686" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>insert</name></member>
      <member refid="classdsm_1_1SparseMatrix_1af0877cdba2a13b6ebffce8160f1a702f" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>insert_and_expand</name></member>
      <member refid="classdsm_1_1SparseMatrix_1abb586ab0a9fbc5f2b035af3b6313a019" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>insert_or_assign</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a655c2acdb2c8b3731719fdd7a0dccb1c" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>insert_or_assign</name></member>
      <member refid="classdsm_1_1SparseMatrix_1ad89567696887d9dfbee87795c0c6285d" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>max_size</name></member>
      <member refid="classdsm_1_1SparseMatrix_1ac03d4bdbd9b86a1b6cc195b26517e5a9" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>operator()</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a1c7de44b13b5549ed9b9e2da9412ea64" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>operator()</name></member>
      <member refid="classdsm_1_1SparseMatrix_1ad379e300d6b825983ace5fbad5332ca3" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>operator()</name></member>
      <member refid="classdsm_1_1SparseMatrix_1af32c5e52810f45bce04c54b1678b9dd8" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>operator()</name></member>
      <member refid="classdsm_1_1SparseMatrix_1aabd47e611ef8e2456b6e7307c3252890" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>operator+</name></member>
      <member refid="classdsm_1_1SparseMatrix_1ac89861a861a1d84076882380e6474d46" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>operator++</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a09f78d83dc057aaa6865ac6cd91ab43b" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>operator+=</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a09325308f2fbf11ffbc2b9043f4fb0b9" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>operator+=</name></member>
      <member refid="classdsm_1_1SparseMatrix_1ab75404692818cf899304cac8704e185d" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>operator-</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a5c6f729555f6b6f051a4b13cb747041a" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>operator-=</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a9ed7c96e2f7cf29f78e5cf9648570ac1" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>operator-=</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a51334882e61e39a865b22cc157168647" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>reshape</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a63f514cfb61078375437e060e338de7c" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>reshape</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a31c1ecaf62652757d8e02527a5f25a80" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>size</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a50b55ef6d77f882ed7064ea7d06cfe54" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>SparseMatrix</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a4a1ad35ac8a796355028883826a44f1a" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>SparseMatrix</name></member>
      <member refid="classdsm_1_1SparseMatrix_1a0d36e25ae348dc66c6e90e80ecc41c55" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>SparseMatrix</name></member>
      <member refid="classdsm_1_1SparseMatrix_1aa726011b476e3da1b31bfb20a0ff7174" prot="public" virt="non-virtual"><scope>dsm::SparseMatrix</scope><name>symmetrize</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
